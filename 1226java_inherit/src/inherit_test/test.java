package inherit_test;

public class test {

	public static void main(String[] args) {

//		tv t = new tv("삼성");
//		computer com = new computer("Dell",4.7f,32);
//		aircon air = new aircon("휘센");
//		
//		System.out.println(t);
//		System.out.println(com);
//		System.out.println(air);
//		
//		t.power();
//		System.out.println(t);
		
		house t = new tv("LG");
		house air = new aircon("캐리어");
		
		t.power();
		air.power();
		
		((tv)t).channel_up(); // 오버라이딩 되지 않은 메서드는 타입 변환하여 사용
		
	}

}

// 상속 	- 여러개의 클래스들을 부모 자식 관계로 연결 해주는것
//		- 여러개의 클래스중에서 부모 클래스는 하나이다. 
//		- 클래스에서의 상속은 단일상속만 가능(부모클래스는 하나뿐)
//		- 부모클래스의 인스턴스변수, 메서드를 자식 클래스에서 사용할 수 있다.
//		- 단, final이 붙은 메서드는 오버라이딩 안됨
//		- final이 붙은 클래스는 부모클래스가 될 수 없다.
//		- 자식클래스의 객체를 생성하면 부모클래스의 객체도 생성된다.
//		  (부모클래스의 생성자메서드도 실행된다.)
//		  (자식클래스 생성자에는 자식클래스의 역할만, 부모클래스의 변수값 저장같은 역할은
// 		  부모클래스 생성자를 통해 이루어지도록 - 객체지향 언어의 일반적인 규칙)

//	다형성
//	 - 부모클래스로 자식클래스의 객체를 담을수 있는 방법
//	 - 객체의 메서드가 통일되어 사용될수 있다.
//	 - 하나의 타입으로 여러 타입을 관리 할 수 있기 떄문에 유지보수가 좋다.
//	 - 객체의 재사용성이 쉬워지기때문에 코드의 재사용성이 높아져 개발자가 편하다.
//	 - 안정성이 높다.

//	다형성 조건
//	 - 상속관계 : 부모 - 자식간 클래스 상속

//	 - 오버라이딩 : 메서드의 이름, 반환타입, 매개변수가 모두 동일해야한다.
// 	 			 메서드의 내용은 서로 다르게 작성해도된다.
//				 부모 클래스의 메서드를 자식클래스에서도 구현되어야한다.
//				 자식클래스에 오버라이딩 된 메서드 위에는 @Override라고 명시해주는게 좋다
//				 부모클래스로부터 상속받아 재구성된 메서드라고 표기해줘야 다른개발자가 알아보기 편하고
//				  컴퓨터가 실행하는데 올바른 방식으로 실행 시킬수 있다.

//	- 업캐스팅 : 상위타입으로 타입 변환
//			  자식클래스객체는 부모클래스 타입으로 변환이 되어야한다.

//	- 웹사이트 제작 -> 회원가입 저장
//				-> 게시물 저장
//				-> 문의사항 등록
//				-> 공지사항 등록

// 정리
//	다형성 - 하나의 타입(클래스)로 여러 타입(클래스)을 사용하기 위한 방법
//		   다형성이 되려면 상속, 오버라이딩이 꼭 필요하다.
//		    상속은 extends를 이용하여 자식클래들에게 적용한다.
//		    오버라이딩은 부모클래스에 추상메서드로 정의하고 자식클래스에서 메서드를 구현한다.
//			
//			상속 관계를 되려면 각각의 클래스들의 유사성이 있어야한다.
//			ainmal - 개, 고양이, 곰, 사자
//			게임유닛 - 마린, 저글링, 히드라, 시즈탱크, 질럿
//			자동차 - 소나타, 그랜저, e클래스, 쏘렌토
//			
//			추상메서드를 가진 클래스는 반드시 추상클래스가 되어야한다.
//			상속관계에서는 추상메서드가 자식에게 물려지게된다.
//			자식클래스가 추상메서드를 실체화 구현 하지않으면 자식클래스도 쿠상클래스가 되어야한다.
//			추상클래스는 객체 생성이 안된다.
                                                                







                                                                                                                 